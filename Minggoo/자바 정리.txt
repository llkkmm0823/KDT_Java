프론트측 - html, css, js

html 
data, <>태그 사용 <a href=”연결하고싶은페이지/주소">클릭</a>


css 
style, 여러개 html페이지에 동일한 스타일 지정하고 싶은 외부에 out.css를 만들어서
	html에 연결해서 사용할 수 있음.<link>
	1) css를 외부파일로 만들어 html에서 연결
	2) html안에 Head태그안에 <style>안에 css정의해서 사용 
	3) 특정한 태그안에 <button style=”color:red”> style속성을 사용  


javascript(js) 
자바와의 차이점!, 웹브라우저의 웹문서에 동적으로 처리 역할 담당.

1) js(브라우저에서 실행) - 자바(서버에서 실행)
2)js(함수중심) - 자바(OOP)
3)js(var, let, const) - 자바(byte, short, int, long, float, double, ….)
4)js(함수) - 자바(메서드)
	 
* 외부연결 <javascript>, html의 Head <javascript>, 특정한 태그안에 onClick=”alert()”

ㄴ 함수를 사용하고 싶으면 반드시 외부연결을 해야하는 것은 아니다.
ㄴ 함수는 입력값 있는 것이 있고 없는 것이 있다.
ㄴ 함수는 반환값이 있는 것(return)이 있고 없는 것이 있다.
ㄴ html안에 css, js를 여러개 넣을 수 있다. 여러개 쓸 수 있다. Html은 줄의 제약이 없음
ㄴ 각 Html의 버튼, Input, table등의 태그에 스타일(css)을 지정할 수 있다.



백엔드 측 자바

a. 객체지향형프로그래밍(OOP, Object Oriented Programming, C++, Java) 
    ←-> 절차지향형프로그래명(C)
    클래스(틀) → 클래스를 가지고 실제로 사용할 부품(객체, Object, 클래스의 실제, instance)
    하나의 클래스로는 여러개의 객체를 만들 수 있다.

b. 데이터 타입
	- 기본형: 값이 저장, 정수, 실수, 문자1, 논리
	- 참조형: 주소가 저장, 기본형이 아닌 모두, 배열, 클래스, 인터페이스, 컬렉션, …

c. 연산자- 산술(+ - * / %), 논리(&& || !), 비교(== != > <=), 대입/할당(=), 연결(+)

d. 배열-고정길이, 타입동일할 때 보통 많이 사용, length변수(개수) 읽기전용변수 

e. 컬렉션-가변길이, 타입다를때도 사용 가능 
    	- 순서: list, 중복X: set, 키+값: map

f. 클래스(틀) - 멤버변수(속성, 성질) + 멤버메서드(동작, 기능처리)
 
- 메서드: 함수와 같은 개념
입력값이 있을 수도 있고 없을 수도 있음.   ⇒ 입력값이 있으면 매개변수 지정
public int add(int x, int y) { //x, y는 매개변수(파라메터)
return x + y; //return이 없는 경우 public뒤에는 void라고 써주어야한다.
//return이 있는 경우 public뒤에는 리턴하는 데이터타입을 써주어야한다.
} // add(100, 200)

g. 상속 : 클래스를 만들 때 기존에 있던 클래스를 재사용해서 좀더 추가해서 만들자라는 개념

public class 하늘을나는자동차 extends 자동차{}
자동차(기존에 있던 클래스) : 수퍼클래스, 부모클래스
하늘을나는자동차(새롭게 만든 클래스) : 서브클래스, 자식클래스
public class C extends A, B {} ⇒ 여러개에서 상속 불가(다중상속 X)
public class C extends A{} ⇒ 하나의 부모로부터만 상속 가능(단일상속 O)

