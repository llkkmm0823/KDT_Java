컬렉션 프레임워크 (Collection Framework)
자바 컬렉션 프레임워크는 데이터 구조와 알고리즘을 구현한 클래스들의 계층 구조로, 데이터를 다루기 위한 표준화된 방법을 제공.

==============================================================================
<주요 인터페이스>
Collection: 
모든 컬렉션 클래스의 뿌리 인터페이스로, 데이터의 그룹을 나타내며 기본적인 메서드를 정의

List: 
순서가 있는 데이터의 목록을 나타내며, 중복된 요소를 허용합니다. 
ex. ArrayList와 LinkedList

Set: 
중복 요소를 허용하지 않는 데이터의 집합
ex.HashSet와 TreeSet

Map: 
키-값 쌍을 저장하는 데이터 구조를 나타내며, 중복된 키를 허용하지 않습니다. 
ex.HashMap과 TreeMap

==============================================================================

<핵심 클래스>
ArrayList: 
동적 배열을 구현한 리스트 컬렉션. 요소를 인덱스로 접근할 수 있음.

LinkedList: 
이중 연결 리스트를 사용한 리스트 컬렉션. 요소를 추가, 삭제할 때 빠름.

HashSet: 
해시 테이블을 기반으로 한 집합 컬렉션. 중복 요소를 허용하지 않음.

TreeSet: 
이진 검색 트리를 사용한 집합 컬렉션. 요소는 정렬된 순서로 저장됨.

HashMap: 
해시맵을 사용한 키-값 맵 컬렉션. 키를 통해 값을 검색할 수 있음.

TreeMap: 
이진 검색 트리를 사용한 키-값 맵 컬렉션. 키는 정렬된 순서로 저장됨.

==============================================================================

<컬렉션의 활용>
데이터 저장 및 관리: 컬렉션을 사용하여 데이터를 저장하고 필요에 따라 추가, 삭제, 수정, 검색할 수 있음

반복(iteration)
for-each 루프나 반복자(Iterator)를 활용하여 컬렉션의 요소에 접근

정렬(Sorting)
Collections 유틸리티 클래스를 사용하여 컬렉션을 정렬할 수 있음

제네릭 (Generics)
컬렉션은 제네릭을 지원하며, 이를 통해 타입 안정성을 확보하고 다양한 데이터 유형을 저장할 수 있습니다.

동기화 (Synchronization)
몇몇 컬렉션은 스레드 안전성을 제공하는 동기화된 버전도 제공. 멀티스레드 환경에서 사용

*데이터의 순서가 중요한 경우 List를, 중복된 요소를 제거해야 하는 경우 Set을 사용